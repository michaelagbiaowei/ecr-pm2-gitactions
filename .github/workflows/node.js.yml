name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x, 20.x, 22.x]

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
  #   - run: npm ci
  #   - run: export NODE_OPTIONS=--openssl-legacy-provider && npm run build --if-present

  # push_to_registry:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, tag, and push image to Amazon ECR
  #       run: |
  #         docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
  #         docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} 
  #         echo "image=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT


  # trivy:
  #   name: Daily Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   needs: push_to_registry

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Pull Docker Image From ECR
  #       run: docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

  #     - name: Scan Docker Image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
  #         exit-code: "1"
  #         ignore-unfixed: true
  #         vuln-type: "os,library"
  #         severity: "CRITICAL,HIGH"

  deploy_to_ec2:
    runs-on: ubuntu-latest
    # needs: trivy

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Set up SSH agent for EC2 access
      - name: Set up SSH for EC2 Access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Disable SSH Strict Host Key Checking
        run: |
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      # Step 4: Install Ansible
      # - name: Install Ansible
      #   run: |
      #     if ! command -v ansible &> /dev/null;
      #     then
      #       sudo apt update
      #       sudo apt install ansible-core -y
      #       ansible --version
      #       echo "Ansible is installed successful"
      #     else
      #       echo "Ansible is Installed"
      #     fi

      # Step 5: Ensure the Ansible inventory file exists
      - name: Prepare Ansible inventory
        run: |
          mkdir -p ./ansible
          touch ./ansible/inventory.txt  # Ensure the file exists

      # Step 6: Add server IP to Ansible inventory
      - name: Add server IP to Ansible inventory
        run: |
          echo "[web]" > ./ansible/inventory.txt  # Add host group
          aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=ops-server" \
          --query "Reservations[*].Instances[*].PublicIpAddress" \
          --output text >> ./ansible/inventory.txt 
        shell: bash

      # Debug Line
      - name: Confirm Server IP
        run:  cat ./ansible/inventory.txt

      #Step 7: Run Ansible playbook 
      - name: Run Ansible Playbook
        run: |
          mkdir /tmp/artifact
          cp -r . /tmp/artifact
          tar -czvf artifact.tar.gz -C /tmp/artifact .
          rm -rf /tmp/artifact
          mkdir -p ./ansible/roles/start-server/files/
          mv artifact.tar.gz ./ansible/roles/start-server/files/artifact.tar.gz
          ansible-playbook -i ./ansible/inventory.txt ./ansible/deploy.yml
              
        

